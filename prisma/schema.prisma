// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  ADMIN
  USER
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  title         String?
  position      String?
  accounts      Account[]
  sessions      Session[]
  likedPosts    PostLike[]
  comments      Comment[]
  events        Event[]
  role          Role       @default(USER)
  // role          String     @default("USER")
  posts         Post[]
  skills        Skill[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id          String     @id @default(cuid())
  title       String
  content     String     @db.Text
  contentHtml String     @db.Text
  hidden      Boolean    @default(false)
  author      User       @relation(fields: [authorId], references: [id])
  authorId    String
  likedBy     PostLike[]
  comments    Comment[]
  published   Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([authorId])
}

model PostLike {
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())

  @@id([postId, userId])
  @@index([postId])
  @@index([userId])
}

model Comment {
  id          String   @id @default(cuid())
  content     String   @db.Text
  contentHtml String   @db.Text
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
  post        Post     @relation(fields: [postId], references: [id])
  postId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([postId])
  @@index([authorId])
}

model Event {
  id              String   @id @default(cuid())
  title           String
  speaker         User     @relation(fields: [speakerId], references: [id])
  speakerId       String
  startDate       DateTime
  location        String
  meeting         String?
  resources       String?
  description     String   @db.Text
  descriptionHtml String   @db.Text
  summary         String?  @db.Text
  summaryHtml     String?  @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([speakerId])
}

model Technology {
  id          String   @id @default(cuid())
  name        String
  description String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  skills      Skill[]
}

model Skill {
  id           String     @id @default(cuid())
  technology   Technology @relation(fields: [technologyId], references: [id])
  technologyId String
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  expertise    Int        @default(0)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([technologyId])
  @@index([userId])
  @@unique([technologyId, userId])
}
