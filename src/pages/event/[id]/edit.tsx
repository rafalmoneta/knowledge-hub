import React from "react";
import type { NextPage } from "next";
import { trpc } from "@/utils/api";
import { useRouter } from "next/router";
import Head from "next/head";
import { Layout } from "@/components/layout";
import Container from "@/components/container";
import { EventForm } from "@/components/event-form";
import { useSession } from "next-auth/react";

const EditEventPage: NextPage = () => {
  const { data: session } = useSession();
  const router = useRouter();
  const eventId = router.query.id as string;

  const eventQuery = trpc.event.get.useQuery({ id: eventId });
  const updateEventMutation = trpc.event.update.useMutation({
    async onSuccess(data) {
      await router.push(`/event/${data.id}`);
    },
  });

  if (eventQuery.isLoading) {
    return (
      <Layout>
        <Container>
          <div className="animate-pulse">
            <div className="h-[400px] w-full rounded-2xl bg-gray-200 dark:bg-gray-700" />
          </div>
          <div className="mt-7 space-y-3">
            {/* eslint-disable-next-line @typescript-eslint/no-unsafe-assignment */}
            {[...Array(3)].map((_, idx) => (
              <React.Fragment key={idx}>
                <div className="grid grid-cols-3 gap-4 pt-8">
                  <div className="col-span-2 h-5 rounded bg-gray-200 dark:bg-gray-700" />
                  <div className="col-span-1 h-5 rounded bg-gray-200 dark:bg-gray-700" />
                </div>
                <div className="h-5 w-1/2 rounded bg-gray-200 dark:bg-gray-700" />
                <div className="grid grid-cols-3 gap-4">
                  <div className="col-span-1 h-5 rounded bg-gray-200 dark:bg-gray-700" />
                  <div className="col-span-2 h-5 rounded bg-gray-200 dark:bg-gray-700" />
                </div>
                <div className="h-5 w-3/5 rounded bg-gray-200 dark:bg-gray-700" />
              </React.Fragment>
            ))}
          </div>
        </Container>
      </Layout>
    );
  }

  if (eventQuery.isError) return <div>Error: {eventQuery.error.message}</div>;
  if (eventQuery.data === null) return <div>Not found</div>;

  const isUserAuthor = session?.user?.id === eventQuery.data.speaker.id;

  return (
    <>
      <Head>
        <title>New Post</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <Container>
          {isUserAuthor ? (
            <div>
              <h1 className="md:leading-14 mt-2 text-3xl font-extrabold leading-9 tracking-tight text-gray-900 dark:text-gray-100 sm:text-4xl sm:leading-10 md:text-5xl">
                <div className="pb-4">Editing:</div>
                <div>{eventQuery.data.title}</div>
              </h1>

              <div className="mt-6">
                <EventForm
                  isSubmitting={updateEventMutation.isLoading}
                  defaultValues={{
                    title: eventQuery.data.title,
                    startDate: eventQuery.data.startDate,
                    location: eventQuery.data.location,
                    meeting: eventQuery.data.meeting,
                    resources: eventQuery.data.resources,
                    description: eventQuery.data.description,
                    summary: eventQuery.data.summary,
                  }}
                  backTo="/"
                  onSubmit={(values) => {
                    updateEventMutation.mutate({
                      id: eventId,
                      data: {
                        title: values.title,
                        startDate: new Date(values.startDate),
                        location: values.location,
                        meeting: values?.meeting ? values.meeting : "",
                        resources: values?.resources ? values.resources : "",
                        description: values.description,
                        summary: values?.summary ? values.summary : "",
                      },
                    });
                  }}
                />
              </div>
            </div>
          ) : (
            <div>Not authorized</div>
          )}
        </Container>
      </Layout>
    </>
  );
};

export default EditEventPage;
