import type { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import { getServerSession } from "next-auth";
import { authOptions } from "@/server/auth";
import { Layout } from "@/components/layout";
import { trpc } from "@/utils/api";
import { useRouter } from "next/router";
import Container from "@/components/container";
import { EventForm } from "@/features/event/event-form";

const NewPostPage: NextPage = () => {
  const router = useRouter();
  const addEventMutation = trpc.event.add.useMutation({
    async onSuccess(data) {
      await router.push(`/event/${data.id}`);
    },
  });

  return (
    <>
      <Head>
        <title>New Event</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <Container>
          <div className="mb-16">
            <h1 className="mb-2 text-2xl font-bold tracking-tight md:text-3xl">
              Creating a new event
            </h1>

            <p className="text-gray-600">
              Create a event and invite your co-workers to join you. You can
              also add a description and a location.
            </p>
          </div>

          <div className="mt-6">
            <EventForm
              isSubmitting={addEventMutation.isLoading}
              defaultValues={{
                title: "",
                startDate: new Date(),
                location: "",
                meeting: "",
                resources: "",
                description: "",
                summary: "",
              }}
              backTo="/"
              onSubmit={(values) => {
                addEventMutation.mutate({
                  title: values.title,
                  startDate: new Date(values.startDate),
                  location: values.location,
                  meeting: values?.meeting ? values.meeting : "",
                  resources: values?.resources ? values.resources : "",
                  description: values.description,
                  summary: values?.summary ? values.summary : "",
                });
              }}
            />
          </div>
        </Container>
      </Layout>
    </>
  );
};

export default NewPostPage;

export const getServerSideProps: GetServerSideProps = async ({ req, res }) => {
  const session = await getServerSession(req, res, authOptions);

  if (!session) {
    return {
      redirect: {
        destination: "/sign-in",
        permanent: false,
      },
    };
  }

  return {
    props: {
      session,
    },
  };
};
