import type { GetServerSideProps, NextPage } from "next";
import { getServerSession } from "next-auth";
import { authOptions } from "@/server/auth";
import { trpc } from "@/utils/api";
import { useRouter } from "next/router";
import Head from "next/head";
import { Layout } from "@/components/layout";
import Container from "@/components/container";
import { PostForm } from "@/features/post/post-form";
import PostLoading from "@/components/loading/PostLoading";
import { useSession } from "next-auth/react";

const EditPostPage: NextPage<{ postId: string }> = ({ postId }) => {
  const router = useRouter();
  const { data: session } = useSession();

  const postQuery = trpc.post.get.useQuery({ id: postId });
  const updatePostMutation = trpc.post.update.useMutation({
    async onSuccess(data) {
      await router.push(`/post/${data.id}`);
    },
  });

  if (postQuery.isLoading) {
    return (
      <Layout>
        <Container>
          <PostLoading />
        </Container>
      </Layout>
    );
  }

  if (postQuery.isError) return <div>Error: {postQuery.error.message}</div>;
  if (postQuery.data === null) return <div>Not found</div>;

  const isUserAuthor = postQuery.data.author.id === session?.user.id;

  return (
    <>
      <Head>
        <title>New Post</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <Container>
          {isUserAuthor ? (
            <div>
              <h1 className="md:leading-14 mt-2 text-3xl font-extrabold leading-9 tracking-tight text-gray-900 dark:text-gray-100 sm:text-4xl sm:leading-10 md:text-5xl">
                <div className="pb-4">Editing:</div>
                <div>{postQuery.data.title}</div>
              </h1>

              <div className="mt-6">
                <PostForm
                  isSubmitting={updatePostMutation.isLoading}
                  defaultValues={{
                    title: postQuery.data.title,
                    content: postQuery.data.content,
                  }}
                  backTo={`/post/${postQuery.data.id}`}
                  onSubmit={(values) =>
                    updatePostMutation.mutate({
                      id: postQuery.data.id,
                      data: { title: values.title, content: values.content },
                    })
                  }
                />
              </div>
            </div>
          ) : (
            <div>Not authorized</div>
          )}
        </Container>
      </Layout>
    </>
  );
};

export default EditPostPage;

export const getServerSideProps: GetServerSideProps = async ({
  req,
  res,
  query,
}) => {
  const session = await getServerSession(req, res, authOptions);

  if (!session) {
    return {
      redirect: {
        destination: "/sign-in",
        permanent: false,
      },
    };
  }

  return {
    props: {
      postId: query.id,
    },
  };
};
