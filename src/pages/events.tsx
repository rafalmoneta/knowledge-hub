import type { GetServerSideProps, NextPage } from "next";
import React from "react";
import Head from "next/head";
import { getServerSession } from "next-auth";
import { authOptions } from "@/server/auth";
import { Layout } from "@/components/layout";
import { trpc } from "@/utils/api";
import EventCard from "@/components/event-card";
import Link from "next/link";
import { eventIsInThePast, eventIsNotInThePast } from "@/lib/dates";

const EventsPage: NextPage = () => {
  const eventsFeedQuery = trpc.event.feed.useQuery();

  const currentEvents = React.useMemo(() => {
    return eventsFeedQuery?.data?.events.filter(eventIsNotInThePast) || [];
  }, [eventsFeedQuery?.data?.events]);

  const pastEvents = React.useMemo(() => {
    return eventsFeedQuery?.data?.events.filter(eventIsInThePast) || [];
  }, [eventsFeedQuery?.data?.events]);

  if (eventsFeedQuery.isLoading)
    return (
      <>
        <Head>
          <title>Knowledge Hub</title>
          <meta name="description" content="Generated by create-t3-app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <Layout>
          <div className="mx-auto max-w-3xl">
            <div>
              <h1 className="text-2xl font-bold tracking-tight md:text-3xl">
                Upcoming Events
              </h1>
              <p className="mt-2 dark:text-gray-400">
                Events are internal training and workshops for the team.
                Navigate to{" "}
                <Link
                  href="/new/event"
                  className="rounded-md bg-slate-200 p-1 underline dark:bg-slate-800"
                >
                  /new/event
                </Link>{" "}
                to create an Event.
              </p>
              <ul className="divide-y">
                {/* eslint-disable-next-line @typescript-eslint/no-unsafe-assignment */}
                {[...Array(1)].map((_, index) => (
                  <li key={index} className="py-10">
                    <div className="animate-pulse">
                      <div className="h-[400px] w-full rounded-2xl bg-gray-200 dark:bg-gray-700" />
                    </div>
                  </li>
                ))}
              </ul>
            </div>
            <div className="mt-16">
              <h1 className="text-2xl font-bold tracking-tight md:text-3xl">
                Past Events
              </h1>
              <ul className="divide-y">
                {/* eslint-disable-next-line @typescript-eslint/no-unsafe-assignment */}
                {[...Array(3)].map((_, index) => (
                  <li key={index} className="py-10">
                    <div className="animate-pulse">
                      <div className="h-[400px] w-full rounded-2xl bg-gray-200 dark:bg-gray-700" />
                    </div>
                  </li>
                ))}
              </ul>
            </div>
          </div>
        </Layout>
      </>
    );

  if (eventsFeedQuery.isError) return <div>Error</div>;
  if (eventsFeedQuery.data === null) return <div>Not found</div>;

  console.log(currentEvents);
  console.log(pastEvents);

  return (
    <>
      <Head>
        <title>Knowledge Hub</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <div className="mx-auto max-w-3xl">
          <div>
            <h1 className="text-2xl font-bold tracking-tight md:text-3xl">
              Upcoming Events
            </h1>
            <p className="mt-2 dark:text-gray-400">
              Events are internal training and workshops for the team. Navigate
              to{" "}
              <Link
                href="/new/event"
                className="rounded-md bg-slate-200 p-1 underline dark:bg-slate-800"
              >
                /new/event
              </Link>{" "}
              to create an Event.
            </p>
            <ul className="divide-y">
              {currentEvents?.map((event) => (
                <li key={event.id} className="py-10">
                  <Link href={`/event/${event.id}`}>
                    <EventCard event={event} hideJoinButton />
                  </Link>
                </li>
              ))}
            </ul>
          </div>
          <div className="mt-16">
            <h1 className="text-2xl font-bold tracking-tight md:text-3xl">
              Past Events
            </h1>
            <ul className="divide-y">
              {pastEvents?.map((event) => (
                <li key={event.id} className="py-10">
                  <Link href={`/event/${event.id}`}>
                    <EventCard event={event} hideJoinButton />
                  </Link>
                </li>
              ))}
            </ul>
          </div>
        </div>
      </Layout>
    </>
  );
};

export default EventsPage;

export const getServerSideProps: GetServerSideProps = async ({ req, res }) => {
  const session = await getServerSession(req, res, authOptions);

  if (!session) {
    return {
      redirect: {
        destination: "/sign-in",
        permanent: false,
      },
    };
  }

  return {
    props: {
      session,
    },
  };
};
